name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4
    
    - name: Clear cache
      run: |
        echo "Clearing all caches..."
        rm -rf ~/.cache/pip || true
        rm -rf ~/.cache/pytest || true
        rm -rf .pytest_cache || true
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      env:
        DEEPSEEK_API_KEY: test_deepseek_key
        STABILITY_API_KEY: test_stability_key
        SECRET_KEY: test_secret_key_for_ci
      run: |
        echo "Clearing pip cache..."
        pip cache purge || true
        echo "Upgrading pip..."
        python -m pip install --upgrade pip
        echo "Installing requirements..."
        pip install -r requirements.txt
        echo "Installing test dependencies..."
        pip install pytest-cov pytest-asyncio flake8 black isort
    
    - name: Lint with flake8
      env:
        DEEPSEEK_API_KEY: test_deepseek_key
        STABILITY_API_KEY: test_stability_key
        SECRET_KEY: test_secret_key_for_ci
      run: |
        flake8 app/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Format check with black
      env:
        DEEPSEEK_API_KEY: test_deepseek_key
        STABILITY_API_KEY: test_stability_key
        SECRET_KEY: test_secret_key_for_ci
      run: |
        black --check app/ tests/
    
    - name: Import sorting check with isort
      env:
        DEEPSEEK_API_KEY: test_deepseek_key
        STABILITY_API_KEY: test_stability_key
        SECRET_KEY: test_secret_key_for_ci
      run: |
        isort --check-only app/ tests/
    
    - name: Run tests with pytest
      env:
        DEEPSEEK_API_KEY: test_deepseek_key
        STABILITY_API_KEY: test_stability_key
        TELEGRAM_BOT_TOKEN: test_telegram_token
        TELEGRAM_CHAT_ID: test_chat_id
        SECRET_KEY: test_secret_key_for_ci
        ALLOWED_ORIGINS: "*"
        TRUSTED_HOSTS: "*"
        REDIS_URL: redis://localhost:6379
        LOG_LEVEL: INFO
      run: |
        echo "=== DIAGNOSTICS ==="
        echo "Python version:"
        python --version
        echo "Python location:"
        which python
        echo "Environment variables:"
        env | grep -E "(DEEPSEEK|STABILITY|TELEGRAM|SECRET)" || echo "No API keys found"
        echo "Installed packages:"
        pip list
        echo "Test files found:"
        find tests/ -name "*.py" -type f
        echo "=== RUNNING TESTS ==="
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --tb=short --maxfail=1
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Clear cache
      run: |
        echo "Clearing all caches..."
        rm -rf ~/.cache/pip || true
        rm -rf ~/.cache/pytest || true
        rm -rf .pytest_cache || true
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      env:
        DEEPSEEK_API_KEY: test_deepseek_key
        STABILITY_API_KEY: test_stability_key
        SECRET_KEY: test_secret_key_for_ci
      run: |
        echo "Clearing pip cache..."
        pip cache purge || true
        echo "Upgrading pip..."
        python -m pip install --upgrade pip
        echo "Installing security tools..."
        pip install bandit safety pytest-asyncio
    
    - name: Run security checks
      env:
        DEEPSEEK_API_KEY: test_deepseek_key
        STABILITY_API_KEY: test_stability_key
        SECRET_KEY: test_secret_key_for_ci
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  docker-build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Clear cache
      run: |
        echo "Clearing all caches..."
        rm -rf ~/.cache/pip || true
        rm -rf ~/.cache/pytest || true
        rm -rf .pytest_cache || true
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          your-username/blog-generator:latest
          your-username/blog-generator:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        no-cache-filters: |
          python
          pip

  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Clear cache
      run: |
        echo "Clearing all caches..."
        rm -rf ~/.cache/pip || true
        rm -rf ~/.cache/pytest || true
        rm -rf .pytest_cache || true
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Здесь можно добавить команды для деплоя на staging
    
    - name: Run integration tests
      run: |
        echo "Running integration tests against staging..."
        # Здесь можно добавить интеграционные тесты

  deploy-production:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Clear cache
      run: |
        echo "Clearing all caches..."
        rm -rf ~/.cache/pip || true
        rm -rf ~/.cache/pytest || true
        rm -rf .pytest_cache || true
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Здесь можно добавить команды для деплоя на production
    
    - name: Health check
      run: |
        echo "Running health checks..."
        # Здесь можно добавить проверки здоровья после деплоя
