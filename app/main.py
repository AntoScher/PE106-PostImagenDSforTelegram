from fastapi import FastAPI, HTTPException, Depends, Request, BackgroundTasks, status
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse, JSONResponse, StreamingResponse
from pydantic import BaseModel, Field
from .generators import ContentGenerator
from .telegram_bot import telegram_bot
from . import webhooks  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –≤–µ–±—Ö—É–∫–æ–≤
from .cache import cached, cache_invalidate
from .rate_limiter import rate_limit_middleware
from .monitoring import metrics_collector, health_checker, performance_profiler
from .validators import EnhancedGenerateRequest, ImageRequest, WebhookValidator
from .auth import auth_service, get_current_active_user, require_admin, Token, User
from .security import setup_security_middleware, security_middleware
from .logger import log_request, log_error, log_performance, LoggerMixin
import logging
import io
import time
import uuid
from typing import Optional, Dict, Any

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Blog Content Generator API",
    description="API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–ª–æ–≥-–ø–æ—Å—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é DeepSeek AI",
    version="3.0.0",
    openapi_tags=[
        {
            "name": "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
            "description": "–û–ø–µ—Ä–∞—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
        },
        {
            "name": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è",
            "description": "–û–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
        },
        {
            "name": "–£—Ç–∏–ª–∏—Ç—ã",
            "description": "–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã"
        },
        {
            "name": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
            "description": "–ú–µ—Ç—Ä–∏–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"
        },
        {
            "name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "description": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"
        }
    ]
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
setup_security_middleware(app)

# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è rate limiting –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
app.middleware("http")(rate_limit_middleware)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –≤–µ–±—Ö—É–∫–æ–≤
app.include_router(webhooks.router, prefix="/api")


# Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
@app.middleware("http")
async def catch_exceptions_and_log(request: Request, call_next):
    request_id = str(uuid.uuid4())
    start_time = time.time()
    
    try:
        response = await call_next(request)
        response_time = time.time() - start_time
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        log_request(
            request_id=request_id,
            method=request.method,
            path=str(request.url.path),
            status_code=response.status_code,
            response_time=response_time
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º request_id –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        response.headers["X-Request-ID"] = request_id
        return response
        
    except Exception as e:
        response_time = time.time() - start_time
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        log_error(e, {
            "request_id": request_id,
            "method": request.method,
            "path": str(request.url.path),
            "response_time": response_time
        })
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Telegram
        error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ API: {str(e)}"
        telegram_bot.send_async(BackgroundTasks(), error_msg)

        return JSONResponse(
            status_code=500,
            content={
                "error": "Internal Server Error",
                "details": str(e),
                "request_id": request_id
            },
            headers={"X-Request-ID": request_id}
        )


# –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.mount("/static", StaticFiles(directory="static"), name="static")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
def get_content_generator():
    if not hasattr(get_content_generator, "instance"):
        get_content_generator.instance = ContentGenerator()
    return get_content_generator.instance


# –ú–æ–¥–µ–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤/–æ—Ç–≤–µ—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é)


class PostResponse(BaseModel):
    topic: str
    title: str
    meta_description: str
    post_content: str
    image: Optional[str] = Field(None, description="Base64 encoded image")


class ErrorResponse(BaseModel):
    error: str
    details: str = None


# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.get("/", tags=["–£—Ç–∏–ª–∏—Ç—ã"], summary="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API")
async def root_health_check():
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    telegram_bot.send_async(BackgroundTasks(), "üü¢ API –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    return {"status": "active", "message": "Blog Generator API —Ä–∞–±–æ—Ç–∞–µ—Ç"}


@app.get("/topics",
         tags=["–£—Ç–∏–ª–∏—Ç—ã"],
         summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–µ–º")
@cached(ttl=3600, key_prefix="topics")
async def predefined_topics():
    return {
        "topics": [
            "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏",
            "–ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –¥–ª—è –∑–∞–Ω—è—Ç—ã—Ö –ª—é–¥–µ–π",
            "–°–æ–≤–µ—Ç—ã –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤—Ä–µ–º–µ–Ω–µ–º",
            "–ö–∞–∫ –Ω–∞—á–∞—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å",
            "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ –±—é–¥–∂–µ—Ç—É"
        ]
    }





# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram
@app.post("/test-telegram",
          include_in_schema=False,
          summary="–¢–µ—Å—Ç Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Å–∫—Ä—ã—Ç–æ)")
async def test_telegram(
        background_tasks: BackgroundTasks,
        message: str = "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç API"
):
    telegram_bot.send_async(background_tasks, f"üîî {message}")
    return {"status": "test_notification_sent"}


# –û–±—Ä–∞–±–æ—Ç–∫–∞ favicon
@app.get("/image/{topic}", 
          tags=["–ì–µ–Ω–µ—Ä–∞—Ü–∏—è"], 
          summary="–ü–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ–º—ã")
async def get_image(
    topic: str,
    background_tasks: BackgroundTasks,
    generator: ContentGenerator = Depends(get_content_generator)
):
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_prompt = generator.generate_image_prompt(topic)
        image_io = generator.image_generator.generate_image_with_text(image_prompt, topic)
        
        # –ü–µ—Ä–µ–º–∞—Ç—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä –≤ –Ω–∞—á–∞–ª–æ
        image_io.seek(0)
        
        return StreamingResponse(
            image_io,
            media_type="image/jpeg",
            headers={"Content-Disposition": f"attachment; filename={topic}.jpg"}
        )
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"
        logger.error(error_msg)
        telegram_bot.send_async(background_tasks, f"‚ö†Ô∏è {error_msg}")
        raise HTTPException(
            status_code=500,
            detail={"error": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "details": str(e)}
        )


@app.get("/favicon.ico", include_in_schema=False)
async def favicon():
    return FileResponse("static/favicon.ico")


# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
@app.get("/metrics",
         tags=["–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"],
         summary="–ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ API")
async def get_metrics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ API"""
    return metrics_collector.get_metrics_summary()


@app.get("/health",
         tags=["–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"],
         summary="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    health_status = health_checker.check_health()
    overall_status = "healthy"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã
    for check_name, check_result in health_status.items():
        if check_result.get('status') != 'healthy':
            overall_status = "unhealthy"
            break
    
    return {
        "status": overall_status,
        "timestamp": time.time(),
        "checks": health_status
    }


@app.get("/cache/status",
         tags=["–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"],
         summary="–°—Ç–∞—Ç—É—Å –∫—ç—à–∞")
async def cache_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫—ç—à–∞"""
    from .cache import cache
    return {
        "size": cache.size(),
        "default_ttl": cache.default_ttl
    }


@app.post("/cache/clear",
          tags=["–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"],
          summary="–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞")
async def clear_cache():
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
    from .cache import cache
    cache.clear()
    return {"message": "Cache cleared successfully"}


# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
class LoginRequest(BaseModel):
    username: str = Field(..., min_length=1, max_length=50)
    password: str = Field(..., min_length=1, max_length=100)


class RegisterRequest(BaseModel):
    username: str = Field(..., min_length=3, max_length=50)
    email: str = Field(..., regex=r"^[^@]+@[^@]+\.[^@]+$")
    password: str = Field(..., min_length=8, max_length=100)
    full_name: str = Field(..., min_length=1, max_length=100)


class ChangePasswordRequest(BaseModel):
    old_password: str = Field(..., min_length=1, max_length=100)
    new_password: str = Field(..., min_length=8, max_length=100)


@app.post("/auth/login",
          response_model=Token,
          tags=["–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"],
          summary="–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
async def login(request: LoginRequest):
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    token = auth_service.login(request.username, request.password)
    if not token:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    return token


@app.post("/auth/register",
          tags=["–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"],
          summary="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def register(request: RegisterRequest):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    success = auth_service.register(
        request.username, 
        request.email, 
        request.password, 
        request.full_name
    )
    if not success:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Username already exists"
        )
    return {"message": "User registered successfully"}


@app.post("/auth/change-password",
          tags=["–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"],
          summary="–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è")
async def change_password(
    request: ChangePasswordRequest,
    current_user: User = Depends(get_current_active_user)
):
    """–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    success = auth_service.change_password(
        current_user.username,
        request.old_password,
        request.new_password
    )
    if not success:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Incorrect old password"
        )
    return {"message": "Password changed successfully"}


@app.get("/auth/me",
         tags=["–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"],
         summary="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
async def get_current_user_info(current_user: User = Depends(get_current_active_user)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    return current_user


# –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
@app.post("/generate",
          response_model=PostResponse,
          responses={500: {"model": ErrorResponse}},
          tags=["–ì–µ–Ω–µ—Ä–∞—Ü–∏—è"],
          summary="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ç–µ–º–µ")
@performance_profiler.profile("generate_post")
async def generate_post(
        request: EnhancedGenerateRequest,
        background_tasks: BackgroundTasks,
        current_user: User = Depends(get_current_active_user),
        generator: ContentGenerator = Depends(get_content_generator)
):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
    start_time = time.time()
    
    try:
        result = generator.generate_post(request.topic, request.style)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        duration = time.time() - start_time
        log_performance("generate_post", duration, {
            "user_id": current_user.username,
            "topic": request.topic
        })

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
        telegram_bot.send_async(
            background_tasks,
            f"üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç!\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {current_user.username}\n"
            f"üìå –¢–µ–º–∞: {request.topic}\n"
            f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {result['title']}"
        )

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        if result.get("image"):
            background_tasks.add_task(
                telegram_bot.send_image,
                result["image"],
                f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞: {result['title']}"
            )

        return result
    except Exception as e:
        duration = time.time() - start_time
        log_error(e, {
            "user_id": current_user.username,
            "topic": request.topic,
            "duration": duration
        })
        
        error_msg = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"
        telegram_bot.send_async(background_tasks, f"‚ö†Ô∏è {error_msg}")
        raise HTTPException(
            status_code=500,
            detail={"error": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞", "details": str(e)}
        )


# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.get("/admin/users",
         tags=["–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"],
         summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)")
async def get_users(admin: User = Depends(require_admin)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    from .auth import fake_users_db
    users = []
    for username, user_data in fake_users_db.items():
        users.append({
            "username": username,
            "email": user_data.get("email"),
            "full_name": user_data.get("full_name"),
            "disabled": user_data.get("disabled", False)
        })
    return {"users": users}


@app.post("/admin/users/{username}/disable",
          tags=["–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"],
          summary="–û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)")
async def disable_user(username: str, admin: User = Depends(require_admin)):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    from .auth import fake_users_db
    if username not in fake_users_db:
        raise HTTPException(status_code=404, detail="User not found")
    
    fake_users_db[username]["disabled"] = True
    return {"message": f"User {username} disabled successfully"}


@app.post("/admin/users/{username}/enable",
          tags=["–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"],
          summary="–í–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)")
async def enable_user(username: str, admin: User = Depends(require_admin)):
    """–í–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    from .auth import fake_users_db
    if username not in fake_users_db:
        raise HTTPException(status_code=404, detail="User not found")
    
    fake_users_db[username]["disabled"] = False
    return {"message": f"User {username} enabled successfully"}