from fastapi import FastAPI, HTTPException, Depends, Request, BackgroundTasks
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse, JSONResponse, StreamingResponse
from pydantic import BaseModel, Field
from .generators import ContentGenerator
from .telegram_bot import telegram_bot
from . import webhooks  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –≤–µ–±—Ö—É–∫–æ–≤
import logging
import io
from typing import Optional, Dict, Any

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Blog Content Generator API",
    description="API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–ª–æ–≥-–ø–æ—Å—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é DeepSeek AI",
    version="1.0.0",
    openapi_tags=[
        {
            "name": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è",
            "description": "–û–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
        },
        {
            "name": "–£—Ç–∏–ª–∏—Ç—ã",
            "description": "–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã"
        }
    ]
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –≤–µ–±—Ö—É–∫–æ–≤
app.include_router(webhooks.router, prefix="/api")


# Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
@app.middleware("http")
async def catch_exceptions(request: Request, call_next):
    try:
        return await call_next(request)
    except Exception as e:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Telegram
        error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ API: {str(e)}"
        telegram_bot.send_async(BackgroundTasks(), error_msg)

        return JSONResponse(
            status_code=500,
            content={
                "error": "Internal Server Error",
                "details": str(e)
            }
        )


# –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.mount("/static", StaticFiles(directory="static"), name="static")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
def get_content_generator():
    if not hasattr(get_content_generator, "instance"):
        get_content_generator.instance = ContentGenerator()
    return get_content_generator.instance


# –ú–æ–¥–µ–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤/–æ—Ç–≤–µ—Ç–æ–≤
class GenerateRequest(BaseModel):
    topic: str = Field(..., min_length=3, max_length=100,
                       example="–ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ",
                       description="–¢–µ–º–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞")


class PostResponse(BaseModel):
    topic: str
    title: str
    meta_description: str
    post_content: str
    image: Optional[str] = Field(None, description="Base64 encoded image")


class ErrorResponse(BaseModel):
    error: str
    details: str = None


# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.get("/", tags=["–£—Ç–∏–ª–∏—Ç—ã"], summary="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API")
async def health_check():
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    telegram_bot.send_async(BackgroundTasks(), "üü¢ API –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    return {"status": "active", "message": "Blog Generator API —Ä–∞–±–æ—Ç–∞–µ—Ç"}


@app.get("/topics",
         tags=["–£—Ç–∏–ª–∏—Ç—ã"],
         summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–µ–º")
async def predefined_topics():
    return {
        "topics": [
            "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏",
            "–ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –¥–ª—è –∑–∞–Ω—è—Ç—ã—Ö –ª—é–¥–µ–π",
            "–°–æ–≤–µ—Ç—ã –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤—Ä–µ–º–µ–Ω–µ–º",
            "–ö–∞–∫ –Ω–∞—á–∞—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å",
            "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ –±—é–¥–∂–µ—Ç—É"
        ]
    }


# –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
@app.post("/generate",
          response_model=PostResponse,
          responses={500: {"model": ErrorResponse}},
          tags=["–ì–µ–Ω–µ—Ä–∞—Ü–∏—è"],
          summary="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ç–µ–º–µ")
async def generate_post(
        request: GenerateRequest,
        background_tasks: BackgroundTasks,
        generator: ContentGenerator = Depends(get_content_generator)
):
    try:
        result = generator.generate_post(request.topic)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
        telegram_bot.send_async(
            background_tasks,
            f"üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç!\n"
            f"üìå –¢–µ–º–∞: {request.topic}\n"
            f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {result['title']}"
        )

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        if result.get("image"):
            background_tasks.add_task(
                telegram_bot.send_image,
                result["image"],
                f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞: {result['title']}"
            )

        return result
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"
        telegram_bot.send_async(background_tasks, f"‚ö†Ô∏è {error_msg}")
        raise HTTPException(
            status_code=500,
            detail={"error": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞", "details": str(e)}
        )


# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram
@app.post("/test-telegram",
          include_in_schema=False,
          summary="–¢–µ—Å—Ç Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Å–∫—Ä—ã—Ç–æ)")
async def test_telegram(
        background_tasks: BackgroundTasks,
        message: str = "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç API"
):
    telegram_bot.send_async(background_tasks, f"üîî {message}")
    return {"status": "test_notification_sent"}


# –û–±—Ä–∞–±–æ—Ç–∫–∞ favicon
@app.get("/image/{topic}", 
          tags=["–ì–µ–Ω–µ—Ä–∞—Ü–∏—è"], 
          summary="–ü–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ–º—ã")
async def get_image(
    topic: str,
    background_tasks: BackgroundTasks,
    generator: ContentGenerator = Depends(get_content_generator)
):
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_prompt = generator.generate_image_prompt(topic)
        image_io = generator.image_generator.generate_image_with_text(image_prompt, topic)
        
        # –ü–µ—Ä–µ–º–∞—Ç—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä –≤ –Ω–∞—á–∞–ª–æ
        image_io.seek(0)
        
        return StreamingResponse(
            image_io,
            media_type="image/jpeg",
            headers={"Content-Disposition": f"attachment; filename={topic}.jpg"}
        )
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"
        logger.error(error_msg)
        telegram_bot.send_async(background_tasks, f"‚ö†Ô∏è {error_msg}")
        raise HTTPException(
            status_code=500,
            detail={"error": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "details": str(e)}
        )


@app.get("/favicon.ico", include_in_schema=False)
async def favicon():
    return FileResponse("static/favicon.ico")